<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 
	마지막 mapping.xml 파일
	이제껏 배운 내용을 모두 넣어보자
	ResultMap, sql 모듈화, 동적 쿼리, a select, all select, insert, delete, update
 -->

<mapper namespace="UserMapper10">

<!-- CamelCase 적용 -->
	<resultMap type="user" id="UserSelectRM">
		<result property="userId" column="user_id" />
		<result property="userName" column="user_name" />
		<result property="password" column="password" />
		<result property="age" column="age" />
		<result property="grade" column="grade" />
		<result property="regDate" column="reg_date" />
	</resultMap>
	
<!-- sql 구문의 모듈화 -->	
	<sql id="select-users">
		SELECT
		user_id, user_name, password, age, grade, reg_date
		FROM users
	</sql>
	
	<sql id ="order-userid-desc">
		ORDER BY user_id DESC
	</sql>

<!-- INSERT, DELECT, UPDATE 추가적으로 기입 -->
	<insert id="addUser" parameterType="user">
		INSERT INTO
		users(user_id, user_name, password, age, grade, reg_date) 
		VALUES (
			#{userId},
			#{userName},
			#{password},
			#{age},
			#{grade},
			#{regDate}
		)
		
	</insert>
	
	<update id="updateUser" parameterType="user">
		UPDATE users
		SET user_name = #{userName}
		WHERE user_id = #{userId}
	
	</update>
	
	
	<delete id="removeUser" parameterType="string">
		DELETE
		FROM users
		WHERE user_id = #{VALUE}
	
	</delete>

<!-- 정적 쿼리 :: 특정한 id를 가지는 사람 검색-->
	<select id="getUser" parameterType="string" resultMap="UserSelectRM" >
		<include refid="select-users"/>
		WHERE user_id = #{VALUE}
	</select>
		
<!-- 동적 쿼리 :: a select, all select -->	
	<select id="getUserList" parameterType="user" resultMap="UserSelectRM" >
		<include refid="select-users"/>
		<where>
			<if test ="userName != null">
				user_name LIKE #{userName}
			</if>
			<if test ="age != null">
				OR age LIKE #{age}
			</if>
		</where>
		<include refid="order-userid-desc" />
	</select>

</mapper>